window对象
    全局作用域
        所有在全局作用域中声明的变量, 函数都会变成 window 对象的属性和方法
        ex
            var age = 25;
            function sayAge(){
                alert(this,age);
            }

            alert(window.age); //25
            sayAge(); //25
            window.sayAge(); //25

        全局变量不能通过 delete 操作符删除, 而直接在 window 对象上定义的属性可以
        ex
            var age = 25;
            window.color = "red";

            delete window.age; //IE < 9 error, 其它浏览器返回 false
            delete window.color; //IE < 9 error, 其它浏览器返回 true

            alert(window.age); //25
            alert(window.color); //undefined

    窗口关系及框架
        如果页面中包含框架, 则每个框架都拥有自己的 window 对象, 并且保存在 frames 集合中
        ex
            <html>
                <head>
                    <title>Frameset Example</title>
                </head>
                <frameset rows="160,*">
                    <frame src="frame.htm" name="topFrame">
                    <frameset cols="50%,50%">
                        <frame src="anotherFrame.htm" name="leftFrame">
                        <frame src="yetanotherFrame.htm" name="rightFrame">
                    </frameset>
                </frameset>
            </html>

            //访问 topFrame
            window.frames[0];
            window.frames["topFrame"];
            top.frames[0];
            top.frames["topFrame"];
            frames[0];
            frames["topFrame"];
    窗口位置
        ex
            //获取窗口左边和上边的位置
            var leftPos = (typeof window.screenLeft == "number") ? window.screenLeft : window.screenX;
            var leftPos = (typeof window.screenRight == "number") ? window.screenRight : window.screenY;
    
            //移动窗口
            window.moveTo(0,0);//左上角
            window.moveBy(0,100)//向下 100 像素
    窗口大小
        跨浏览器无法确定窗口大小, 但是可以取得页面视口的大小
        ex
            var pageWidth = window.innerWidth;
            var pageHeight = window.innerHeight;

            if (typeof pageWidth != "number"){
                if (document.compatMode == "CSS1Compat"){
                    pageWidth = document.documentElement.clientWidth;
                    pageHeight = document.documentElement.clientHeight;
                }
                else{
                    pageWidth = document.body.clientWidth;
                    pageHeight = document.body.clientHeight;
                }
            }

            //调整窗口大小
            resizeTo();
            resizeBy();
    导航和打开窗口
        window.open()
        window.close();
    间歇调用和超时调用
        ex
        //超时调用
            //一秒钟后显示一个警告框
            var timeoutID = setTimeout(function(){
                alert("Hello World");
            }, 1000);
            //取消超时调用
            clearTimeout(timeoutID);
        //间歇调用 间歇调用会一直执行到页面卸载
            //每过 0.5s 会增加 num, num 等于 10 时, 取消后续未执行的调用
            var num = 0;
            var max = 10;
            var intervalID = null;

            function incrementNumber(){
                num ++;

                if (num == max)
                {
                    clearInterval(intervalID);
                    alert("Done");
                }
            }

            intervalID = setInterval(incrementNumber, 500);
        //间歇调用可以使用超时调用替换, 超时调用可控性更好, 最好不要使用间歇调用
        ex
            var num = 0;
            var max = 10;

            function incrementNumber(){
                num ++;

                if (num < max)
                {
                    setTimeout(incrementNumber, 500);
                }
                else
                {
                    alert("Done");
                }
            }
            setTimeout(incrementNumber, 500);
    系统对话框
        alert()
        confirm()
        prompt()
location 对象
    查询字符串参数
        ex
            function getQueryStringArgs(){
                //取得查询字符串并去掉开头的问号
                var qs = (location.search.length > 0 ? location.search.substring(1) : ""),

                //保存数据的对象
                args = {},

                //取得每一项
                items = qs.length ? qs.split("&") : [],
                item = null,
                name = null,
                value = null,

                i = 0;
                len = items.length;

                for (i = 0; i < len; i ++)
                {
                    item = items[i].split("=");
                    name = decodeURIComponent(item[0]);
                    value = decodeURIComponent(item[1]);

                    if (name.length)
                    {
                        args[name] = value;
                    }
                } 

                return args;
            }
        位置操作
            location.herf
            location.hash
            location.search
                .
                .
                ,
            location.replace()
            location.reload()
navigator对象
    用于识别客户端浏览器的信息
    appName 浏览器名称
    Platform 系统平台
        。
        。
        。

    检测插件
    注册处理程序
        registerContentHandler()
        registerProtocolHandler()
screen对象
    表明客户端的能力
history对象
    //后退一页
    history.go(-1);
    history.back();
    //前进一页
    history.go(1);
    history.forward();
