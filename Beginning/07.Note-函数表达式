函数定义方式
    1.函数声明
        ex
            function sayHi(){
                alert("Hi");
            }
    2.函数表达式
        ex
            var sayHi = function(){
                alert("Hi");
            };
    3.匿名函数

1.递归
    递归函数是在一个函数通过名字调用自身的情况下构成的
    ex 
        //乘阶函数
        function factorial(num){
            if (num <= 1)
            {
                return num;
            }
            else
            {
                return num * factorial(num - 1);
            }
        }

        var anotherFactorial = factorial;
        fatorial = null;
        alert(anotherFactorial(4)); //error

        //解决办法
        function factorial(num){
            if (num <= 1)
            {
                return num;
            }
            else
            {
                //通过 arguments.callee 代替函数名可以确保调用函数本身
                return num * arguments.callee(num - 1);
            }
        }
        //严格模式下可以通过使用命名函数表达式来达成相同的结果
        function factorial = (function f(num){
            if (num <= 1)
            {
                return num;
            }
            else
            {
                return num * f(num - 1);
            }
        });
2.闭包
    闭包是指有权访问另一个函数作用域中的变量的函数。
    闭包会携带包含它的函数的作用域, 因此会比其它函数占用更多的内存。过度使用闭包可能会导致内存占用过多, 所以, 只在必要的时候使用闭包。
    闭包与变量
        闭包只能取得包含函数中任何变量的最后与一个值
            ex
                function createFunctions(){
                    var result = new Array();

                    for (var i = 0; i < 10; i++){
                        result[i] = function(){
                            return i;
                        };
                    }

                    return result;// result 中的每个函数都会返回 10
                }
                //解决
                //创建另一个匿名函数
                function createFunctions(){
                    var result = new Array();

                    for (var i = 0; i < 10; i++){
                        result[i] = function(num){
                            return function(){
                                return num;
                            };
                        }(i);
                    }

                    return result;// result 中的每个函数都会返回 10
                }
    this 对象
        ex
            var name = "The Window";

            var object = {
                name: "My Object",

                getNameFunc: function(){
                    return function(){
                        return this.name;
                    };
                }
            };

            alert(object.getNameFunc()()); //The Window
            //解决
            //把外部作用域中的this对象保存在一个闭包能够访问到的变量里
            var name = "The Window";

            var object = {
                name: "My Object",

                getNameFunc: function(){
                    var that = this;
                    return function(){
                        return that.name;
                    };
                }
            };

            alert(object.getNameFunc()()); //My Object
            //作用域中的 arguments 会有同样的问题
    模仿块级作用域 
    JS中多次声明同一变量时没有警告, 多次声明同一变量时, JS会忽略后续的声明(不过, 它会执行后续声明中的变量初始化)
    匿名函数可以通过模仿块级作用域来避免上述问题
    ex
        (function(){
            //这里是块级作用域
        })();

        function outPutNumbers(count){
            for (var i = 0; i < count; i++){
                alert(i);
            }
            alert(i); //可以访问
        }

        function outPutNumbers(count){
            (function(){
                for (var i = 0; i < count; i++){
                    alert(i);
                }
            });
            alert(i); //error, 无法访问 i 
        }
3.私有变量
    JS中没有私有变量
    特权方法
        我们把有权访问私有变量和私有函数的公有方法称为 特权方法
        创建特权方法的方式有两种
        1.在构造函数中定义特权方法
        ex
            function MyObject(){
                //私有变量和私有函数
                var privateVariable = 10;
                function privateFunction(){
                    return false;
                }

                //特权方法
                this.publicMethod = function(){
                    privateVariable ++;
                    return privateFunction();
                };
            }
    模块模式
        为单例创建私有变量和特权方法, 按照惯例, JS是以对象字面量的方式来创建单例对象的
        ex
            var singleton = {
                name: value,
                method: function(){
                    //方法代码
                }
            };
        
        模块方法通过为单例天假私有变量和特权方法能够使其得到增强
        ex
            var singleton = function(){
                //私有变量和私有函数
                var privateVariable = 10;
                function privateFunction(){
                    return false;
                }

                //特权/公有方法和属性
                return {
                    publicProperty: true,
                    publicMethod:function(){
                        privateVariable++;
                        return privateFunction();
                    }
                };
            }();
    增强的模块模式
        在模块模式的基础上, 在返回对象之前加入对其增强的代码
        增强的模块模式适用于那些单例必须是某种类型的实例, 同时还必须添加某些属性和方法对其进行增强的情况.
        ex
            var singleton = function(){
                //私有变量和私有函数
                var privateVariable = 10;
                function privateFunction(){
                    return false;
                }
                //创建对象
                var object = new CustomType();
                //添加特权/公有属性和方法
                object.publicProperty = true;
                object.publicMethod = function(){
                    privateVariable ++;
                    return privateFunction();
                };

                return object;
            }();
