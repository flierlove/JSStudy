1.Object实例创建
    ex:
        对象定义
        var person = new Object();
        person.name = "KK";
        person.age = 20;
        对象字面量
        var person = {
            name:"KK",
            "age":20
        }

        function displayInfo(args)
        {
            var output = "";
            if(typeof args.name == "string")
            {
                output += "Name: " + args.name + "\n";
            }

            if (typeof args.age == "number")
            {
                output += "Age: " + args.age + "\n";
            }

            alert(output);
        }//"Name KK
         // Age 20"

        displayInfo({
            name: "KK",
            age: 20
        });

        displayInfo({
            name: "KK"
        });// "Name KK"

    person["name"]//"KK"
    person.name//"KK"-----------建议用法
2.数组类型


    ex
        var colors = new Array();
        var colors = new Array(20);
        var colors = new args("Red", "Blue", "Yellow");

    new 可以被省略
    ex
        var colors = Array(3);
    
    检测数组
        if (value instanceof Array)
        {
            //对数组执行操作
        }

        网页中包含多个框架时,Array构造函数也可能存在多个,所以在两个框架之间传递参数时,由于Array的构造函数的差异
        instanceof 方法可能不会返回正确的结果。

        if (Array.isArray(value))
        {
            //对数组执行某些操作
        }

    数组方法
        栈
        push()
        pop()
        队列
        shift()
        unshift()
        排序
        reverse()
        sort(function)
            ex
                function compare(value1, value2)
                {
                    if(value1 < value2)
                    {
                        return -1;
                    }
                    else if (value1 == value2)
                    {
                        return 0;
                    }
                    else
                    {
                        return 1;
                    }
                }

                var values = [1,2,5,10,3];
                values.sort(compare);
                alert(values);// 1,2,3,5,10
        操作方法
        concat()
        slice()
        splice()//删除,插入,替换
            ex
                splice(0,2);//删除前两项
                splice(2,0,"Red","Green");//从位置2开始插入"Red","Green"
                splice(2,1,"Red","Green");//删除位置2的项，然后从位置2开始插入"Red","Green"
        indexOf()
        lastIndexOf()
        迭代方法
        every()
        filter()
        forEach()
        map()
        some()
        缩小方法
        reduce()
        reduceRight()
3.Date类型
    Date.parse()
    Date.UTC()
    Date.new()
    //日期格式化方法
    toDateString();
    toTimeString();
    toLocalDateString();
    toLocalTimeString();
    toUTCString();
4.RegExp(正则表达式)类型
    ex
        var pattern1 = /[bc]at/i;//匹配第一个 bat 或 cat, 不区分大小写
        var pattern2 = new RegExp("[bc]at", "i");//等同于 pattern1

    RegExp实例属性
        global
        ignoreCase
        lastIndex
        mutiline
        source
    RegExp实例方法
    RegExp构造函数属性
5.Function类型
    1.函数是对象
    2.没有重载
    3.函数声明和函数表达式
        ex
        //正确
            alert(sum(10,10));
            function sum(num1, num2)
            {
                return num1 + num2;
            }    
        //错误
            alert(sum(10, 10));
            var sum = function(num1, num2){return num1 + num2;};
    4.函数作为值使用
        ex
        //参数
            function callSomeFunction(someFunction, someArgument)
            {
                return someFunction(someArgument);
            }
        //返回值
            function createComparisonFunction(propertyName)
            {
                return function(object1, object2)
                {
                    var value1 = object1[propertyName];
                    var value2 = object2[propertyName];

                    if(value1 < value2)
                    {
                        return -1;
                    }
                    else if(value1 > value2)
                    {
                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                };
            }
        5.作用域,内部属性 argument,this arguments.callee(callee 是一个指针,指向拥有这个argumnets对象的函数)
            ex
                //乘阶函数
                    function factorial(num)
                    {
                        if (num <= 1)
                        {
                            return num;
                        }
                        else
                        {
                            return num * factorial(num);
                        }
                    }
                //函数名去耦合可以写为
                    function factorial(num)
                    {
                        if (num <= 1)
                        {
                            return num;
                        }
                        else
                        {
                            return num * arguments.callee(num -1);
                        }
                    }

        6.apply()方法
        7.call()方法
        8.bind()方法
6.基本包装类型

    实例化基本数据类型会导致在使用 typeof 和 instancetypeof 操作符测试基本类型数值与引用类型数值时,
    得到的记过完全不同。

    Boolean对象
        理解基本类型的布尔值与Boolean对象之前的区别。
        建议:永远不要使用Boolean对象
    Number
        toFix()//显示几位小数,有四舍五入特性
        toExponential()//返回指数表示法
        toExponential()//返回系统认为合适的数值表示格式(小数,指数表示。。)
        建议:不要使用Number类型。
    String
        //访问特定字符
        charAt()
        charCodeAt()
        //字符串操作
        contat()
        slice()
        substr()
        subString()
        //字符串位置(未找到则返回 －1)
        indexOf()
        lastIndexOf()

        trim()//创建一个字符串的副本，删除前置及后缀的所有空格

        //大小写转换
        toLowerCase()
        toLocaleLowerCase()
        toUpperCase()
        toLocalUpperCase()

        //模式匹配 接受正则表达式或RegExp对象
        match()
        search()
        replace()
        split()

    引用类型与基本包装类型的主要区别就是对象的生存期
7.单体内置对象
    ECMA－262对内置对象的定义是:"由ECMAScript 提供的, 不依赖于宿主环境的对象, 这些对象在 ECMAScript程序执行之前就已经存在了。"
    Object, Array, string都是内置对象

    Global 和 Math 是两个单体内置对象
    1.Golabal 对象
        URI编码方法
            encodeURI()//不会对属于URI的特殊字符进行编码
            encodeURIComponent()//对任何非标准字符进行编码
            decodeURI()
            decodeURIComponent()
        eval()方法
        Global对象属性
        window对象
    2.Math对象
        Math对象的属性
        min(),max()
        舍入方法
            Math.ceil()//向上舍入为整数
            Math.floor()//向下舍入为整数
            Math.round()//四舍五入为整数
        random()//0~1之间的随机数
            ex选取随机数
                value ＝ Math.floor(Math.random() * 可能值的总数 + 第一个可能的值)
        //常用其它
        Math.abs(num)//绝对值
        match.sqrt(num)//平方根